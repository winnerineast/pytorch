graph(%0 : Float(*, *)
      %1 : Float(*, *)
      %2 : UndefinedTensor
      %3 : UndefinedTensor
      %4 : UndefinedTensor
      %5 : UndefinedTensor
      %6 : UndefinedTensor
      %7 : UndefinedTensor
      %8 : UndefinedTensor
      %9 : UndefinedTensor
      %10 : Float(*, *)
      %11 : Float(*)
      %12 : Float(*)
      %13 : Float(*)
      %14 : Float(*, *)
      %15 : Float(*, *)
      %Wx : Float(*, *)
      %Uz : Float(*, *)
      %18 : Float(*, *)
      %19 : int[]
      %20 : int[]
      %21 : int[]
      %22 : int[]
      %23 : int[]
      %24 : int[]
      %ingate : Float(*, *)
      %forgetgate : Float(*, *)
      %cellgate : Float(*, *)
      %outgate : Float(*, *)
      %29 : int[]
      %30 : int[]
      %31 : Float(*, *)) {
  %32 : int = prim::Constant[value=1]()
  %33 : int[] = aten::size(%31)
  %34 : int[] = aten::size(%outgate)
  %35 : int[] = aten::size(%cellgate)
  %36 : int[] = aten::size(%ingate)
  %37 : int[] = aten::size(%forgetgate)
  %38 : int[] = aten::size(%11)
  %39 : int[] = aten::size(%12)
  %40 : int[] = aten::size(%Uz)
  %41 : int[] = aten::size(%18)
  %42 : int[] = aten::size(%Wx)
  %43 : int[] = aten::size(%13)
  %44 : Float(*, *) = aten::mul(%0, %31)
  %45 : Tensor = prim::SumToSize(%44, %34)
  %46 : Float(*, *) = aten::mul(%0, %outgate)
  %47 : Tensor = prim::SumToSize(%46, %33)
  %48 : Tensor = prim::FusionGroup_0(%1, %47, %31)
  %49 : Tensor = prim::SumToSize(%48, %29)
  %50 : Tensor = prim::SumToSize(%48, %30)
  %51 : Tensor = aten::mul(%50, %cellgate)
  %52 : Tensor = prim::SumToSize(%51, %36)
  %53 : Tensor = aten::mul(%50, %ingate)
  %54 : Tensor = prim::SumToSize(%53, %35)
  %55 : Tensor = aten::mul(%49, %10)
  %56 : Tensor = prim::SumToSize(%55, %37)
  %57 : Tensor = prim::FusionGroup_1(%52, %ingate, %56, %forgetgate, %54, %cellgate, %45, %outgate)
  %58 : Tensor = prim::SumToSize(%57, %24)
  %59 : Tensor = prim::SumToSize(%57, %22)
  %60 : Tensor = aten::mul(%59, %Uz)
  %61 : Tensor = prim::SumToSize(%60, %38)
  %62 : Tensor = aten::mul(%59, %11)
  %63 : Tensor = prim::SumToSize(%62, %40)
  %64 : Tensor = prim::SumToSize(%57, %19)
  %65 : Tensor = prim::SumToSize(%57, %20)
  %66 : Tensor = aten::mul(%65, %Wx)
  %67 : Tensor = prim::SumToSize(%66, %39)
  %68 : Tensor = aten::mul(%65, %12)
  %69 : Tensor = prim::SumToSize(%68, %42)
  %70 : Tensor = aten::mul(%64, %Uz)
  %71 : Tensor = prim::SumToSize(%70, %41)
  %72 : Tensor = aten::mul(%64, %18)
  %73 : Tensor = prim::SumToSize(%72, %40)
  %74 : Tensor = aten::add(%63, %73, %32)
  %75 : Tensor = aten::mul(%71, %Wx)
  %76 : Tensor = prim::SumToSize(%75, %43)
  %77 : Tensor = aten::mul(%71, %13)
  %78 : Tensor = prim::SumToSize(%77, %42)
  %79 : Tensor = aten::add(%69, %78, %32)
  %80 : Float(*, *) = aten::t(%14)
  %81 : Float(*, *) = aten::mm(%80, %74)
  %82 : Float(*, *) = aten::t(%81)
  %83 : Float(*, *) = aten::t(%15)
  %84 : Float(*, *) = aten::mm(%83, %79)
  %85 : Float(*, *) = aten::t(%84)
  return (%58, %61, %67, %76, %82, %85);
}
with prim::FusionGroup_0 = graph(%0 : Float(*, *)
      %1 : Tensor
      %2 : Float(*, *)) {
  %3 : Float(*, *) = aten::mul(%2, %2)
  %4 : Float(*, *) = aten::neg(%3)
  %5 : int = prim::Constant[value=1]()
  %6 : Float(*, *) = aten::add(%4, %5, %5)
  %7 : Tensor = aten::mul(%1, %6)
  %8 : int = prim::Constant[value=1]()
  %9 : Tensor = aten::add(%0, %7, %8)
  return (%9);
}
with prim::FusionGroup_1 = graph(%0 : Tensor
      %1 : Float(*, *)
      %2 : Tensor
      %3 : Float(*, *)
      %4 : Tensor
      %5 : Float(*, *)
      %6 : Tensor
      %7 : Float(*, *)) {
  %8 : Float(*, *) = aten::neg(%7)
  %9 : int = prim::Constant[value=1]()
  %10 : Float(*, *) = aten::add(%8, %9, %9)
  %11 : Float(*, *) = aten::mul(%10, %7)
  %12 : Tensor = aten::mul(%11, %6)
  %13 : Float(*, *) = aten::mul(%5, %5)
  %14 : Float(*, *) = aten::neg(%13)
  %15 : int = prim::Constant[value=1]()
  %16 : Float(*, *) = aten::add(%14, %15, %15)
  %17 : Tensor = aten::mul(%4, %16)
  %18 : Float(*, *) = aten::neg(%3)
  %19 : int = prim::Constant[value=1]()
  %20 : Float(*, *) = aten::add(%18, %19, %19)
  %21 : Float(*, *) = aten::mul(%20, %3)
  %22 : Tensor = aten::mul(%21, %2)
  %23 : Float(*, *) = aten::neg(%1)
  %24 : int = prim::Constant[value=1]()
  %25 : Float(*, *) = aten::add(%23, %24, %24)
  %26 : Float(*, *) = aten::mul(%25, %1)
  %27 : Tensor = aten::mul(%26, %0)
  %28 : Tensor = prim::FusedConcat[dim=1](%27, %22, %17, %12)
  return (%28);
}
